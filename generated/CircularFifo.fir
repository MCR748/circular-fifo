circuit CircularFifo :
  module CircularFifo :
    input clock : Clock
    input reset : UInt<1>
    output io : { enq : { flip write : UInt<1>, full : UInt<1>, flip din : UInt<8>, flip dinValid : UInt<1>}, deq : { flip read : UInt<1>, empty : UInt<1>, dout : UInt<8>, doutValid : UInt<1>}}

    reg readPointer : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[CircularFifo.scala 34:28]
    reg writePointer : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[CircularFifo.scala 35:29]
    reg readWrapBit : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CircularFifo.scala 36:28]
    reg writeWrapBit : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CircularFifo.scala 37:29]
    reg stateReg : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[CircularFifo.scala 39:25]
    reg dataReg : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[CircularFifo.scala 40:24]
    reg storage : UInt<8>[4], clock with :
      reset => (UInt<1>("h0"), storage) @[CircularFifo.scala 41:20]
    node _T = eq(stateReg, UInt<1>("h0")) @[CircularFifo.scala 43:17]
    when _T : @[CircularFifo.scala 43:27]
      node _T_1 = and(io.enq.write, io.enq.dinValid) @[CircularFifo.scala 45:23]
      when _T_1 : @[CircularFifo.scala 45:42]
        node _writePointer_T = sub(UInt<3>("h4"), UInt<1>("h1")) @[CircularFifo.scala 46:52]
        node _writePointer_T_1 = tail(_writePointer_T, 1) @[CircularFifo.scala 46:52]
        node _writePointer_T_2 = eq(writePointer, _writePointer_T_1) @[CircularFifo.scala 46:40]
        node _writePointer_T_3 = add(writePointer, UInt<1>("h1")) @[CircularFifo.scala 46:75]
        node _writePointer_T_4 = tail(_writePointer_T_3, 1) @[CircularFifo.scala 46:75]
        node _writePointer_T_5 = mux(_writePointer_T_2, UInt<1>("h0"), _writePointer_T_4) @[CircularFifo.scala 46:26]
        writePointer <= _writePointer_T_5 @[CircularFifo.scala 46:20]
        node _writeWrapBit_T = sub(UInt<3>("h4"), UInt<1>("h1")) @[CircularFifo.scala 47:52]
        node _writeWrapBit_T_1 = tail(_writeWrapBit_T, 1) @[CircularFifo.scala 47:52]
        node _writeWrapBit_T_2 = eq(writePointer, _writeWrapBit_T_1) @[CircularFifo.scala 47:40]
        node _writeWrapBit_T_3 = eq(writeWrapBit, UInt<1>("h0")) @[CircularFifo.scala 47:58]
        node _writeWrapBit_T_4 = mux(_writeWrapBit_T_2, _writeWrapBit_T_3, writeWrapBit) @[CircularFifo.scala 47:26]
        writeWrapBit <= _writeWrapBit_T_4 @[CircularFifo.scala 47:20]
        stateReg <= UInt<1>("h1") @[CircularFifo.scala 48:16]
        storage[writePointer] <= io.enq.din @[CircularFifo.scala 49:29]
    else :
      node _T_2 = eq(stateReg, UInt<1>("h1")) @[CircularFifo.scala 52:24]
      when _T_2 : @[CircularFifo.scala 52:38]
        node _T_3 = and(io.enq.write, io.enq.dinValid) @[CircularFifo.scala 53:23]
        when _T_3 : @[CircularFifo.scala 53:42]
          node _T_4 = eq(readPointer, writePointer) @[CircularFifo.scala 56:25]
          node _T_5 = eq(writeWrapBit, UInt<1>("h0")) @[CircularFifo.scala 56:63]
          node _T_6 = eq(readWrapBit, _T_5) @[CircularFifo.scala 56:59]
          node _T_7 = and(_T_4, _T_6) @[CircularFifo.scala 56:43]
          when _T_7 : @[CircularFifo.scala 56:78]
            stateReg <= UInt<2>("h2") @[CircularFifo.scala 57:18]
          storage[writePointer] <= io.enq.din @[CircularFifo.scala 59:29]
          node _writePointer_T_6 = sub(UInt<3>("h4"), UInt<1>("h1")) @[CircularFifo.scala 60:52]
          node _writePointer_T_7 = tail(_writePointer_T_6, 1) @[CircularFifo.scala 60:52]
          node _writePointer_T_8 = eq(writePointer, _writePointer_T_7) @[CircularFifo.scala 60:40]
          node _writePointer_T_9 = add(writePointer, UInt<1>("h1")) @[CircularFifo.scala 60:75]
          node _writePointer_T_10 = tail(_writePointer_T_9, 1) @[CircularFifo.scala 60:75]
          node _writePointer_T_11 = mux(_writePointer_T_8, UInt<1>("h0"), _writePointer_T_10) @[CircularFifo.scala 60:26]
          writePointer <= _writePointer_T_11 @[CircularFifo.scala 60:20]
          node _writeWrapBit_T_5 = sub(UInt<3>("h4"), UInt<1>("h1")) @[CircularFifo.scala 61:52]
          node _writeWrapBit_T_6 = tail(_writeWrapBit_T_5, 1) @[CircularFifo.scala 61:52]
          node _writeWrapBit_T_7 = eq(writePointer, _writeWrapBit_T_6) @[CircularFifo.scala 61:40]
          node _writeWrapBit_T_8 = eq(writeWrapBit, UInt<1>("h0")) @[CircularFifo.scala 61:58]
          node _writeWrapBit_T_9 = mux(_writeWrapBit_T_7, _writeWrapBit_T_8, writeWrapBit) @[CircularFifo.scala 61:26]
          writeWrapBit <= _writeWrapBit_T_9 @[CircularFifo.scala 61:20]
        when io.deq.read : @[CircularFifo.scala 63:22]
          node _T_8 = eq(readPointer, writePointer) @[CircularFifo.scala 65:25]
          node _T_9 = eq(readWrapBit, writeWrapBit) @[CircularFifo.scala 65:59]
          node _T_10 = and(_T_8, _T_9) @[CircularFifo.scala 65:43]
          when _T_10 : @[CircularFifo.scala 65:77]
            stateReg <= UInt<1>("h0") @[CircularFifo.scala 66:18]
          node _readPointer_T = sub(UInt<3>("h4"), UInt<1>("h1")) @[CircularFifo.scala 68:50]
          node _readPointer_T_1 = tail(_readPointer_T, 1) @[CircularFifo.scala 68:50]
          node _readPointer_T_2 = eq(readPointer, _readPointer_T_1) @[CircularFifo.scala 68:38]
          node _readPointer_T_3 = add(readPointer, UInt<1>("h1")) @[CircularFifo.scala 68:72]
          node _readPointer_T_4 = tail(_readPointer_T_3, 1) @[CircularFifo.scala 68:72]
          node _readPointer_T_5 = mux(_readPointer_T_2, UInt<1>("h0"), _readPointer_T_4) @[CircularFifo.scala 68:25]
          readPointer <= _readPointer_T_5 @[CircularFifo.scala 68:19]
          node _readWrapBit_T = sub(UInt<3>("h4"), UInt<1>("h1")) @[CircularFifo.scala 69:50]
          node _readWrapBit_T_1 = tail(_readWrapBit_T, 1) @[CircularFifo.scala 69:50]
          node _readWrapBit_T_2 = eq(readPointer, _readWrapBit_T_1) @[CircularFifo.scala 69:38]
          node _readWrapBit_T_3 = eq(readWrapBit, UInt<1>("h0")) @[CircularFifo.scala 69:56]
          node _readWrapBit_T_4 = mux(_readWrapBit_T_2, _readWrapBit_T_3, readWrapBit) @[CircularFifo.scala 69:25]
          readWrapBit <= _readWrapBit_T_4 @[CircularFifo.scala 69:19]
      else :
        node _T_11 = eq(stateReg, UInt<2>("h2")) @[CircularFifo.scala 72:25]
        when _T_11 : @[CircularFifo.scala 72:35]
          when io.deq.read : @[CircularFifo.scala 73:22]
            node _readPointer_T_6 = sub(UInt<3>("h4"), UInt<1>("h1")) @[CircularFifo.scala 74:50]
            node _readPointer_T_7 = tail(_readPointer_T_6, 1) @[CircularFifo.scala 74:50]
            node _readPointer_T_8 = eq(readPointer, _readPointer_T_7) @[CircularFifo.scala 74:38]
            node _readPointer_T_9 = add(readPointer, UInt<1>("h1")) @[CircularFifo.scala 74:72]
            node _readPointer_T_10 = tail(_readPointer_T_9, 1) @[CircularFifo.scala 74:72]
            node _readPointer_T_11 = mux(_readPointer_T_8, UInt<1>("h0"), _readPointer_T_10) @[CircularFifo.scala 74:25]
            readPointer <= _readPointer_T_11 @[CircularFifo.scala 74:19]
            node _readWrapBit_T_5 = sub(UInt<3>("h4"), UInt<1>("h1")) @[CircularFifo.scala 75:50]
            node _readWrapBit_T_6 = tail(_readWrapBit_T_5, 1) @[CircularFifo.scala 75:50]
            node _readWrapBit_T_7 = eq(readPointer, _readWrapBit_T_6) @[CircularFifo.scala 75:38]
            node _readWrapBit_T_8 = eq(readWrapBit, UInt<1>("h0")) @[CircularFifo.scala 75:56]
            node _readWrapBit_T_9 = mux(_readWrapBit_T_7, _readWrapBit_T_8, readWrapBit) @[CircularFifo.scala 75:25]
            readWrapBit <= _readWrapBit_T_9 @[CircularFifo.scala 75:19]
            stateReg <= UInt<1>("h1") @[CircularFifo.scala 76:16]
    node _io_enq_full_T = eq(stateReg, UInt<2>("h2")) @[CircularFifo.scala 80:28]
    io.enq.full <= _io_enq_full_T @[CircularFifo.scala 80:15]
    node _io_deq_empty_T = eq(stateReg, UInt<1>("h0")) @[CircularFifo.scala 81:29]
    io.deq.empty <= _io_deq_empty_T @[CircularFifo.scala 81:16]
    io.deq.dout <= storage[readPointer] @[CircularFifo.scala 82:15]
    node _io_deq_doutValid_T = eq(stateReg, UInt<1>("h0")) @[CircularFifo.scala 83:36]
    node _io_deq_doutValid_T_1 = mux(_io_deq_doutValid_T, UInt<1>("h0"), UInt<1>("h1")) @[CircularFifo.scala 83:26]
    io.deq.doutValid <= _io_deq_doutValid_T_1 @[CircularFifo.scala 83:20]

